-----Part 1------
-- Table: Customer
CREATE TABLE Customer (
    id INT PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL
);

-- Table: CustomerProfile
CREATE TABLE CustomerProfile (
    id INT PRIMARY KEY,
    isLoggedIn BOOLEAN DEFAULT FALSE,
    customer_id INT UNIQUE,  -- UNIQUE enforces one-to-one  reference to the Customer table
    FOREIGN KEY (customer_id) REFERENCES Customer(id)
);

--Insert those customers
INSERT INTO Customer (id, first_name, last_name)
VALUES 
(1, 'John', 'Doe'),
(2, 'Jerome', 'Lalu'),
(3, 'Lea', 'Rive');


--Insert those customer profiles, use subqueries
INSERT INTO CustomerProfile (id, isLoggedIn, customer_id)
VALUES
(1, TRUE, (SELECT id FROM Customer WHERE first_name = 'John' AND last_name = 'Doe')),
(2, FALSE, (SELECT id FROM Customer WHERE first_name = 'Jerome' AND last_name = 'Lalu'));

---Use the relevant types of Joins to display:
--The first_name of the LoggedIn customers
SELECT Customer.first_name
FROM Customer 
JOIN CustomerProfile 
	ON  Customer.id = CustomerProfile.customer_id
WHERE CustomerProfile.isLoggedIn =FALSE ;


--All the customers first_name and isLoggedIn columns - even the customers those who donâ€™t have a profile.
SELECT Customer.first_name, CustomerProfile.isLoggedIn
FROM Customer
LEFT JOIN CustomerProfile 
    ON Customer.id = CustomerProfile.customer_id;

----The number of customers that are not LoggedIn

SELECT COUNT(Customer.id)
FROM Customer
RIGHT JOIN CustomerProfile 
    ON Customer.id = CustomerProfile.customer_id
WHERE CustomerProfile.isLoggedIn =FALSE ;


-----Part 2------
--Create a table named Book
CREATE TABLE  Book(
    book_id SERIAL PRIMARY KEY,----SERIAL is a data type that means the value for the column will be automatically generated by the system when a new record is added.
    title VARCHAR(255) NOT NULL,
    author VARCHAR(100) NOT NULL
);

----Insert those books : 
INSERT INTO Book (title,author)
VALUES
('Alice In Wonderland', 'Lewis Carroll'),
('Harry Potter', 'J.K Rowling'),
('To kill a mockingbird', 'Harper Lee');


--Create a table named Student,
CREATE TABLE  Student (
    student_id BIGINT PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    age BIGINT CHECK (age <= 15)
);


----Insert those students:
INSERT INTO Student (student_id,name, age)
VALUES
(0,'John', 12),
(1,'Lera', 11),
(2,'Patrick', 10),
(3,'Bob', 14);


--Create a table named Library (junction table), with the columns : 
CREATE TABLE Library (
    book_fk_id INT,                     
    student_fk_id INT,                  
    borrowed_date DATE,                 
    PRIMARY KEY (book_fk_id, student_fk_id),  
    FOREIGN KEY (book_fk_id) REFERENCES Book(book_id) 
        ON DELETE CASCADE 
        ON UPDATE CASCADE,
    FOREIGN KEY (student_fk_id) REFERENCES Student(student_id) 
        ON DELETE CASCADE 
        ON UPDATE CASCADE
);




---Add 4 records in the junction table, use subqueries
INSERT INTO Library (book_fk_id, student_fk_id, borrowed_date)
VALUES
(
    (SELECT book_id FROM Book WHERE title = 'Alice In Wonderland'),
    (SELECT student_id FROM Student WHERE name = 'John'),
    '2022-02-15'
),
(
    (SELECT book_id FROM Book WHERE title = 'To kill a mockingbird'),
    (SELECT student_id FROM Student WHERE name = 'Bob'),
    '2021-03-03'
),
(
    (SELECT book_id FROM Book WHERE title = 'Alice In Wonderland'),
    (SELECT student_id FROM Student WHERE name = 'Lera'),
    '2021-05-23'
),
(
    (SELECT book_id FROM Book WHERE title = 'Harry Potter'),
    (SELECT student_id FROM Student WHERE name = 'Bob'),
    '2021-08-12'
);

--Select all the columns from the junction table
SELECT * FROM Library

--Select the name of the student and the title of the borrowed books
SELECT Student.name, Book.title
FROM Library
JOIN Book ON  Library.book_fk_id = Book.book_id
JOIN Student ON Library.student_fk_id = Student.student_id;


---Select the average age of the children, that borrowed the book Alice in Wonderland
SELECT AVG(Student.age)
FROM Library
JOIN Book ON  Library.book_fk_id = Book.book_id
JOIN Student ON Library.student_fk_id = Student.student_id
WHERE Book.title = 'Alice In Wonderland';

--Delete a student from the Student table, what happened in the junction table ?
DELETE FROM Student
WHERE name = 'John';

--He also will be delete in Library



